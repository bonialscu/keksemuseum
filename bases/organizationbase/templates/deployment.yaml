apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  labels:
    app: {{ .Values.appName }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    # this configures rolling updates
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: "100%"
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  template:
    metadata:
      annotations:
        iam.amazonaws.com/role: {{ .Values.iamRole }}
      labels:
        app: {{ .Values.appName }}
    spec:
      containers:
        - name: {{ .Values.appName }}
          image: {{ .Values.container.repository }}:{{ .Values.appVersion }}
          imagePullPolicy: {{ .Values.container.pullPolicy }}
          {{- if .Values.container.pullSecrets }}
          imagePullSecrets:
          {{- range .Values.container.pullSecrets }}
          - name: {{ . }}
          {{- end }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.service.trafficPort }}
              name: traffic
              protocol: TCP
            - containerPort: {{ .Values.service.healthPort }}
              name: health
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.container.livenessEndpoint | quote }}
              port: health
            initialDelaySeconds: 40
            timeoutSeconds: 2
            periodSeconds: 3
            failureThreshold: 1
          readinessProbe:
            httpGet:
              path: {{ .Values.container.readynessEndpoint | quote }}
              port: health
            initialDelaySeconds: 40
            timeoutSeconds: 2
            periodSeconds: 3
            failureThreshold: 1
          resources:
            limits:
              cpu: {{ .Values.container.limits.cpu }}
              memory: {{ .Values.container.limits.memory }}
            requests:
              cpu: {{ .Values.container.requests.cpu }}
              memory: {{ .Values.container.requests.memory }}
